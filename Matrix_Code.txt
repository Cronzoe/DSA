#include<iostream>
#include<conio.h>
using namespace std;

class Matrix {
	double arr[3][4];
	double temp[4];
public:
	Matrix() {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++)
				arr[i][j] = 0;
		}
	}
	void input() {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++) {
				cout << "Enter Value of Row " << i + 1 << ": ";
				cin >> arr[i][j];
			}
			cout << endl; 
		}
	}
	void display() {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++)
				if (arr[i][j] == -0)
					arr[i][j] = 0;
		}
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++) {
				if (j == 0) { cout << arr[i][j] << "x "; }
				else if (j == 1) { cout << arr[i][j] << "y "; }
				else if (j == 2) { cout << arr[i][j] << "z "; }
				else if (j == 3) { cout << "= " << arr[i][j]; }
			}
			cout << endl;
		}
		cout << endl;
	}
	double determinant() {
		double det =
			+arr[0][0] * (arr[1][1] * arr[2][2] - arr[1][2] * arr[2][1])
			- arr[0][1] * (arr[1][0] * arr[2][2] - arr[2][0] * arr[1][2])
			+ arr[0][2] * (arr[1][0] * arr[2][1] - arr[1][1] * arr[2][0]);
		return det;
	}
	void system() {
		if (arr[0][3] != 0 || arr[1][3] != 0 || arr[2][3] != 0)
			cout << "\nSystem is Non-Homogeneous.\n";
		else
			cout << "\nSystem is Homogeneous.\n";
	}
	void intersect() {
		if (arr[0][0] == 0 && arr[1][0] == 0) {
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[0][j];
				arr[0][j] = arr[2][j];
				arr[2][j] = temp[j];
			}
		}
		else if (arr[0][0] == 0) {
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[0][j];
				arr[0][j] = arr[1][j];
				arr[1][j] = temp[j];
			}
		}
	}
	void echelon() {
		if (arr[0][0] != 1) {
			double a = 1 / arr[0][0];
			for (int j = 0; j < 4; j++) {
				arr[0][j] = arr[0][j] * a;
			}
		}
		if (arr[1][0] != 0) {
			double a = -(arr[1][0]);
			double temp[4];
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[0][j] * a;
			}
			for (int j = 0; j < 4; j++) {
				arr[1][j] = arr[1][j] + temp[j];
			}
		}
		if (arr[2][0] != 0) {
			double a = -(arr[2][0]);
			double temp[4];
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[0][j] * a;
			}
			for (int j = 0; j < 4; j++) {
				arr[2][j] = arr[2][j] + temp[j];
			}
		}
		if (arr[1][1] == 0){
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[1][j];
				arr[1][j] = arr[2][j];
				arr[2][j] = temp[j];
			}
		}
		if (arr[1][1] != 1) {
			double a = 1 / arr[1][1];
			for (int j = 0; j < 4; j++) {
				arr[1][j] = arr[1][j] * a;
			}
		}
		if (arr[2][1] != 0) {
			double a = -(arr[2][1]);
			double temp[4];
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[1][j] * a;
			}
			for (int j = 0; j < 4; j++) {
				arr[2][j] = arr[2][j] + temp[j];
			}
		}
		if (arr[2][2] != 1) {
			double a = 1 / arr[2][2];
			for (int j = 0; j < 4; j++) {
				arr[2][j] = arr[2][j] * a;
			}
		}
		if (arr[2][2] == 0 || arr[2][3] == 0) {
			cout << "System has Infinite Solutions.";
			_getch();
			exit(0);
		}
	}
	void reduce_echelon() {
		echelon();
		if (arr[0][1] != 0) {
			double a = -(arr[0][1]);
			double temp[4];
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[1][j] * a;
			}
			for (int j = 0; j < 4; j++) {
				arr[0][j] = arr[0][j] + temp[j];
			}
		}
		if (arr[0][2] != 0) {
			double a = -(arr[0][2]);
			double temp[4];
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[2][j] * a;
			}
			for (int j = 0; j < 4; j++) {
				arr[0][j] = arr[0][j] + temp[j];
			}
		}
		if (arr[1][2] != 0) {
			double a = -(arr[1][2]);
			double temp[4];
			for (int j = 0; j < 4; j++) {
				temp[j] = arr[2][j] * a;
			}
			for (int j = 0; j < 4; j++) {
				arr[1][j] = arr[1][j] + temp[j];
			}
		}
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++)
				if (arr[i][j] == -0)
					arr[i][j] = 0;
		}
		cout << "Reduced Row Echelon Form:\n\n\t";
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 4; j++) {
				if (j == 3) { cout << " " << arr[i][j]; }
				else	cout << arr[i][j] << "  ";
			}
			cout << "\n\t\n";
		}
	}
};

int main() {
	Matrix m;
	m.input();
	system("cls");
	m.display();
	m.system();
	m.reduce_echelon();
	_getch();
	system("pause");
}
